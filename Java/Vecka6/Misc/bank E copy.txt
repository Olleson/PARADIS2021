// Peter Idestam-Almquist, 2020-01-31.
// Olivia Aixinjuelo, 2020-03-

// package paradis.assignment2;
package Java.Vecka6;

import java.util.List;
import java.util.Random;
import java.util.ArrayList;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

class Bank {
	// Instance variables.
	private final List<Account> accounts = new ArrayList<Account>();
	private final List<ReentrantReadWriteLock> locks = new ArrayList<ReentrantReadWriteLock>();
	private final Random random = new Random();

	// Instance methods.
	int newAccount(int balance) {
		synchronized (this) {
			int accountId = accounts.size(); // FIX ORIGINAL
			accounts.add(new Account(accountId, balance));
			locks.add(new ReentrantReadWriteLock(true));
			return accountId;
		}
	}

	int getAccountBalance(int accountId) {
		ReadWriteLock lock = locks.get(accountId);
		Account account = accounts.get(accountId);
		lock.readLock().lock();
		try {
			return account.getBalance();
		} finally {
			lock.readLock().unlock();
		}
	}

	void runOperation(Operation operation) {
		int ID = operation.getAccountId();
		ReadWriteLock lock = locks.get(ID);
		lock.writeLock().lock();
		try {
			Account account = accounts.get(ID);
			int balance = account.getBalance();
			balance = balance + operation.getAmount();
			account.setBalance(balance);
		} finally {
			lock.writeLock().unlock();
		}
	}

	void runTransaction(Transaction transaction) {
		List<Operation> currentOperations = transaction.getOperations();
		for (Operation operation : currentOperations) {
			int ID = operation.getAccountId();
			ReadWriteLock lock = locks.get(ID);
			lock.writeLock().lock();
			try {
				runOperation(operation);
			} finally {
				lock.writeLock().unlock();
			}
		}
	}
}
